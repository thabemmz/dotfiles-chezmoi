[user]
	name = thabemmz
	email = github@cvbemmel.nl
	signingkey = 66466D5D60089B24

[color]
	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
	ui = auto
[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
[color "status"]
	added = yellow
	changed = green
	untracked = cyan

[branch]
	# for info on this one, check: https://git-scm.com/docs/git-config
	autosetuprebase = always

[apply]
	# Detect whitespace errors when applying a patch
	whitespace = warn

[core]
	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore

	# Use nano as default editor
	editor = nano

	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = true

[diff "bin"]
	# Use `hexdump` to diff binary files
	textconv = hexdump -v -C

[push]
	# http://stackoverflow.com/q/21839651
	default = current

[hub]
	protocol = https

[alias]
	# View the current working tree status using the short format
	s = status -s

	# View abbreviated SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph --abbrev-commit

	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	# Clone a repository including all submodules
	c = clone --recursive

	# Commit all changes
	ca = !git add -A && git commit -av

	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch --all
	br = branch
	remotes = remote -v

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Remove the old tag with this name and tag the latest commit with it.
	retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# Submodules
	subs = submodule foreach
	all = "!f() { echo \"--- Submodules\"; git submodule foreach \"$@\"; echo \"--- Main project\"; eval $@; }; f"

	# Pull Requests
	pr = "!pr() { git remote prune ${2:-upstream}; git fetch ${2:-upstream} refs/pull/$1/head:refs/remotes/${2:-upstream}/pr/$1; git checkout ${2:-upstream}/pr/$1; }; pr"
  ppr = !git push && git pr

	#	Stolen from https://gist.github.com/robmiller/6018582
	branch-name = "!git rev-parse --abbrev-ref HEAD"

	#	Simpler abbreviations
	st = status
	ci = commit --verbose
	co = checkout
	con = checkout -b
	di = diff
	dc = diff --cached
	amend = commit --amend
	aa = add --all
	ff = merge --ff-only
	pullff = pull --ff-only
	noff = merge --no-ff
	fa = fetch --all
	b = branch
	ds = diff --stat=160,120
	dh1 = diff HEAD~1
	pom = push origin master
	brrem = remote update origin --prune
	po = push origin $1
	dev = checkout develop
	whichrepos = remote show origin
	upd = "!git pull origin master && git pull origin develop"
	delloc = "!git branch --delete \"$1\""
	delrem = "!git push origin --delete \"$1\""
  delall = "!git delloc \"$1\" && git delrem \"$1\""

	#	Works on current branches (c stands for `current`)
	cpo = "!git push origin $(git branch-name)"

	# Dependent of bsanders git-kit
	featurestart = "topic-start feature"
	releasestart = "topic-start release"
	hotfixstart = "topic-start hotfix"
	featurefinish = "topic-finish"
	releasefinish = "topic-finish"
	hotfixfinish = "topic-finish"
[commit]
	gpgsign = true
